from typing import Any, Callable, overload

_generated_inner = bytes | list["_generated_inner"] | dict[bytes, "_generated_inner"]
_generated = dict[bytes, _generated_inner]

class protocol_version:
    V1: Any
    V2: Any

class file_storage:
    def add_file(
        self, path: str, size: int, flags: int = 0, mtime: int = 0, linkpath: str = ""
    ) -> None: ...
    def is_valid(self) -> bool: ...
    def num_pieces(self) -> int: ...
    def num_files(self) -> int: ...
    def hash(self, file_index_tag: int) -> sha1_hash: ...
    def file_path(self, idx: int, save_path: str = "") -> str: ...
    def file_name(self, idx: int) -> str: ...
    def file_size(self, idx: int) -> int: ...
    def file_index_for_root(self, digest: digest32) -> int: ...
    def piece_index_at_file(self, idx: int) -> int: ...
    def file_index_at_piece(self, idx: int) -> int: ...
    def root(self, idx: 0) -> sha256_hash: ...
    def v2(self, hash: digest32) -> bool: ...

class create_torrent:
    v1_only: int = 64
    v2_only: int = 32
    def __init__(self, storage: file_storage, piece_size: int, flags: int = 0): ...
    def generate(self) -> _generated: ...
    def set_comment(self, comment: str) -> None: ...
    def set_creator(self, creator: str) -> None: ...
    def add_url_seed(self, url: str) -> None: ...
    def add_tracker(self, tracker: str, tier: int = 0) -> None: ...
    def num_pieces(self) -> int: ...
    def add_similar_torrent(self, infohash: sha1_hash) -> None: ...

class sha1_hash:
    def __init__(self, data: bytes): ...
    def to_string(self) -> bytes: ...
    def to_bytes(self) -> bytes: ...
    def clear(self) -> None: ...
    def is_all_zeros(self) -> bool: ...

class sha256_hash:
    def __init__(self, data: bytes): ...
    def to_string(self) -> bytes: ...
    def to_bytes(self) -> bytes: ...
    def clear(self) -> None: ...
    def is_all_zeros(self) -> bool: ...

class info_hash_t:
    v1: sha1_hash | None
    v2: sha256_hash | None

    def has_v1(self) -> bool: ...
    def has_v2(self) -> bool: ...
    @overload
    def get(self, version: protocol_version.V1) -> sha1_hash: ...
    @overload
    def get(self, version: protocol_version.V2) -> sha256_hash: ...
    def get(
        self, version: protocol_version.V1 | protocol_version.V2
    ) -> sha1_hash | sha256_hash: ...

class torrent_info:
    def info_hash(self) -> bytes: ...
    def filename(self) -> str: ...
    def piece_size(self) -> int: ...
    def is_i2p(self) -> bool: ...
    def num_pieces(self) -> int: ...
    def piece_length(self) -> int: ...

class add_torrent_params:
    ti: torrent_info
    info_hash: sha1_hash
    info_hashes: info_hash_t

class digest32: ...

def add_files(fs: file_storage, file: str) -> None: ...
def set_piece_hashes(t: create_torrent, p: str, f: Callable[[int], None] | None = None) -> None: ...
def load_torrent_file(filename: str) -> add_torrent_params: ...
