from typing import Callable

_generated_inner = bytes | list["_generated_inner"] | dict[bytes, "_generated_inner"]
_generated = dict[bytes, _generated_inner]

class file_storage:
    def add_file(self, path: str, file_size: int) -> None: ...
    def num_pieces(self) -> int: ...
    def num_files(self) -> int: ...

class create_torrent:
    v1_only: int = 64
    v2_only: int = 32
    def __init__(self, fs: file_storage, piece_size: int, flags: int = 0): ...
    def generate(self) -> _generated: ...
    def set_comment(self, comment: str) -> None: ...
    def set_creator(self, creator: str) -> None: ...
    def add_url_seed(self, url: str) -> None: ...
    def add_tracker(self, tracker: str, tier: int = 0) -> None: ...
    def num_pieces(self) -> int: ...
    def add_similar_torrent(self, infohash: sha1_hash) -> None: ...

class sha1_hash:
    def __init__(self, data: bytes):...
    def to_string(self) -> bytes:...
    def to_bytes(self) -> bytes:...
    def clear(self) -> None:...
    def is_all_zeros(self) -> bool:...


def add_files(fs: file_storage, file: str) -> None: ...
def set_piece_hashes(t: create_torrent, p: str, f: Callable[[int], None] | None = None) -> None: ...

