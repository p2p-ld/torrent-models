[project]
name = "torrent-pydantic"
dynamic=["version"]
description = ".torrent file parsing and creation with pydantic"
authors = [
    {name = "sneakers-the-rat", email = "sneakers-the-rat@protonmail.com"},
]
dependencies = [
    "pydantic>=2.10.6",
    "bencode-rs>=0.0.7",
    "tqdm>=4.67.1",
    'typing-extensions>=4.13.0; python_version<"3.12"',
]
requires-python = ">=3.11"
readme = "README.md"
license = {text = "EUPL-1.2"}
repository = "https://github.com/p2p-ld/noob"
keywords = [
    "bittorrent",
    "torrent",
    "pydantic"
]
classifiers = [
    "Framework :: Pydantic",
    "Framework :: Pydantic :: 2",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Typing :: Typed"
]
[project.urls]
repository = "https://github.com/p2p-ld/torrent-pydantic"


[project.optional-dependencies]
cli = [
    "click>=8.1.8",
    "humanize>=4.12.2",
]
tests = [
    "torrent-pydantic[cli]",
    "pytest>=8.3.5",
    "pytest-cov>=6.0.0",
    "pytest-codspeed>=3.2.0",
    "torf>=4.3.0",
    "pytest-profiling>=1.8.1",
]
mypy = [
    "torrent-pydantic[cli]",
    "types-tqdm>=4.67.0.20250417",
]
dev = [
    "torrent-pydantic[tests,mypy]",
    "ruff>=0.11.2",
    "black>=25.1.0",
    "mypy>=1.15.0",
    "types-tqdm>=4.67.0.20250417",
]



[project.scripts]
torrentpd = "torrent_pydantic.cli.main:main"

[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"


[tool.pdm]
distribution = true

[tool.pdm.version]
# versions from tags like "v0.1.2"
fallback_version = "0.0.0"
source = "scm"
tag_filter="v*"
tag_regex = '^v(?:\D*)?(?P<version>([1-9][0-9]*!)?(0|[1-9][0-9]*)(\.(0|[1-9][0-9]*))*((a|b|c|rc)(0|[1-9][0-9]*))?(\.post(0|[1-9][0-9]*))?(\.dev(0|[1-9][0-9]*))?$)$'



[tool.pdm.scripts]
test = "pytest"
lint.composite = [
    "ruff check",
    "black . --diff",
    "mypy",
]
format.composite = [
    "black .",
    "ruff check --fix",
]
mypy = "mypy"
benchmark = "pytest tests/bench.py --codspeed"


[tool.ruff]
target-version = "py311"
include = ["src/torrent_pydantic/**/*.py", "tests/**/*.py", "pyproject.toml"]
exclude = []
line-length = 100

[tool.ruff.lint]
select = [
    # pycodestyle
    "E",
    # Pyflakes
    "F",
    # pyupgrade
    "UP",
    # flake8-bugbear
    "B",
    # flake8-simplify
    "SIM",
    # isort
    "I",
    # annotations
    "ANN",
    # no debugger
    "T10",
    ## ----------
    # pydocstyle
    # indentation
    "D207", "D208",
    # whitespace
    "D210", "D211",
    # emptiness
    "D419",
    # snake case function name
    "N802",
    # FastAPI
    "FAST",
    # SQLi and Autoescaping in templates
    "S608", "S701",
]
ignore = [
    "ANN401", "ANN204",
    # explicit strict arg for zip
    "B905",
    # builtin type annotations
    "UP006", "UP035",
    # docstrings for __init__
    "D107",
]

fixable = ["ALL"]

[tool.ruff.lint.per-file-ignores]
"tests/**/test_*" = ["ANN001", "ANN201", "F841"]
"tests/bench.py" = ["ANN001", "ANN201", "F841"]
"tests/conftest.py" = ["F403", "E402"]
"tests/fixtures/**/*" = ["F403"]

[tool.black]
target-version = ['py311', 'py312', 'py313']
include = "(?:tests|torrent_pydantic)/.*\\.py$"
line-length = 100

[tool.mypy]
mypy_path = "$MYPY_CONFIG_FILE_DIR/src"
packages = ["torrent_pydantic"]
warn_redundant_casts = true
warn_unused_ignores = true
show_error_context = true
show_column_numbers = true
show_error_code_links = true
pretty = true
color_output = true
plugins = ['pydantic.mypy']

[tool.pytest]
addopts = [
    "--cov=torrent-pydantic",
    "--cov-append",
]
markers = []